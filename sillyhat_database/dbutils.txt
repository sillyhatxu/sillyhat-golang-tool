package database

//import (
//	_ "github.com/go-sql-driver/mysql"
//	"log"
//	"time"
//	"database/sql"
//	"encoding/json"
//	"strconv"
//	"reflect"
//	"github.com/pkg/errors"
//)
//
//var db = &sql.DB{}
//
//func InitDBUtils(dataSourceName string){
//	var err error
//	db,err = sql.Open("mysql", dataSourceName)
//	if err != nil{
//		panic(err)
//	}
//	//db,_ = sql.Open("mysql", "database_username:database_password@tcp(127.0.0.1:3306)/ocb_syncer")
//	connMaxLifetime := 10
//	maxIdleConns := 10
//	maxOpenConns := 50
//	log.Printf("connMaxLifetime:%d\n", connMaxLifetime)
//	log.Printf("maxIdleConns:%d\n", maxIdleConns)
//	log.Printf("maxOpenConns:%d\n", maxOpenConns)
//	db.SetConnMaxLifetime(time.Duration(connMaxLifetime) * time.Second)
//	db.SetMaxIdleConns(maxIdleConns)
//	db.SetMaxOpenConns(maxOpenConns)
//}
//
////return auto created primary key
//func Insert(sql string,args ...interface{}) (int64,error) {
//	stm,err := db.Prepare(sql)
//	if err != nil {
//		log.Println(err)
//		return 0,err
//	}
//	result,err := stm.Exec(args...)
//	stm.Close()
//	if err != nil {
//		log.Println(err)
//		return 0,err
//	}
//	return result.LastInsertId()
//}
//
////return affected count
//func Update(sql string,args ...interface{}) (int64,error) {
//	stm,err := db.Prepare(sql)
//	if err != nil {
//		return 0,err
//	}
//	result,err := stm.Exec(args...)
//	stm.Close()
//	if err != nil {
//		return 0,err
//	}
//	return result.RowsAffected()
//}
//
////return affected count
//func Delete(sql string,args ...interface{}) (int64,error) {
//	stm,err := db.Prepare(sql)
//	if err != nil {
//		return 0,err
//	}
//	result,err := stm.Exec(args...)
//	stm.Close()
//	if err != nil {
//		return 0,err
//	}
//	return result.RowsAffected()
//}
//
//func DeleteByPrimaryKey(sql string,id int64) (int64,error) {
//	stm,err := db.Prepare(sql)
//	if err != nil {
//		return 0,err
//	}
//	result,err := stm.Exec(id)
//	stm.Close()
//	if err != nil {
//		return 0,err
//	}
//	return result.RowsAffected()
//}
//
////type Entity struct{
////
////}
////
////type Callback func(dbData []interface{}) ([]map[string]string,error)
//
//
////return list
////func Query(sql string,) ([] map[string]string,error) {
//
//func getReflectType(input interface{},column string) reflect.Type{
//	inputType := reflect.TypeOf(input)
//	//inputValue := reflect.ValueOf(input)
//	for i := 0; i < inputType.NumField(); i++ {
//		field := inputType.Field(i)
//		//value := inputValue.Field(i).Interface()
//		//log.Printf("%s: %v = %v\n", field.Name, field.Type, value)
//		if column == field.Name {
//			return field.Type
//		}
//	}
//	return nil
//}
//func getReflectKind(input interface{},column string) reflect.Kind{
//	inputType := reflect.TypeOf(input)
//	inputValue := reflect.ValueOf(input)
//	for i := 0; i < inputType.NumField(); i++ {
//		field := inputType.Field(i)
//		value := inputValue.Field(i)
//		//log.Printf("name: %v ;type: %v;value:%v\n", field.Name, field.Type, value)
//		if column == field.Name {
//			return value.Kind()
//		}
//	}
//	return reflect.String
//}
//
//func Query(sql string,input interface{}) ([] map[string]interface{},error) {
//	tx,err := db.Begin()
//	if err != nil {
//		return nil,err
//	}
//	defer tx.Commit()
//	rows,err := tx.Query(sql)
//	if err != nil {
//		return nil,err
//	}
//	defer rows.Close()
//
//	var result []map[string]interface{}
//	//		test
//	columns, _ := rows.Columns()
//	scanArgs := make([]interface{}, len(columns))
//	values := make([]interface{}, len(columns))
//	for i := range values {
//		scanArgs[i] = &values[i]
//	}
//
//	for rows.Next() {
//		//将行数据保存到record字典
//		err = rows.Scan(scanArgs...)
//		record := make(map[string]interface{})
//		for i, value := range values {
//			if value != nil {
//				fieldKind := getReflectKind(input,columns[i])
//				switch fieldKind {
//					case reflect.Bool:
//						formatValue,err := strconv.ParseBool(string(value.([]byte)))
//						if err != nil {
//							return nil,err
//						}
//						record[columns[i]] = formatValue
//					case reflect.Int:
//						formatValue,err := strconv.Atoi(string(value.([]byte)))
//						if err != nil {
//							return nil,err
//						}
//						record[columns[i]] = formatValue
//					case reflect.Int32:
//						value,err := strconv.ParseInt(string(value.([]byte)),10,64)
//						if err != nil {
//							return nil,err
//						}
//						record[columns[i]] = value
//					case reflect.Int64:
//						value,err := strconv.ParseInt(string(value.([]byte)),10,64)
//						if err != nil {
//							return nil,err
//						}
//						record[columns[i]] = value
//					default:
//						record[columns[i]] = string(value.([]byte))
//				}
//				//if columns[i] == "id"{
//				//	id,_ := strconv.ParseInt(string(value.([]byte)),10,64)
//				//	record[columns[i]] = id
//				//}else{
//				//	record[columns[i]] = string(value.([]byte))
//				//}
//			}
//		}
//		result = append(result, record)
//		//log.Println(record)
//	}
//	resultJson,_ := json.Marshal(result)
//	log.Println(resultJson)
//	//columns, _ := rows.Columns()
//	//scanArgs := make([]interface{}, len(columns))
//	//values := make([]interface{}, len(columns))
//	//for i := range values {
//	//	scanArgs[i] = &values[i]
//	//}
//	//
//	//for rows.Next() {
//	//	//将行数据保存到record字典
//	//	err = rows.Scan(scanArgs...)
//	//	record := make(map[string]string)
//	//	for i, col := range values {
//	//		if col != nil {
//	//			record[columns[i]] = string(col.([]byte))
//	//		}
//	//	}
//	//	result = append(result, record)
//	//	//fmt.Println(record)
//	//}
//	//resultJson,_ := json.Marshal(result)
//	//log.Println(resultJson)
//
//
//
//	//for rows.Next(){
//	//	var name string
//	//	var id int
//	//	if err := rows.Scan(&id,&name); err != nil {
//	//		log.Fatal(err)
//	//	}
//	//	//fmt.Printf("name:%s ,id:is %d\n", name, id)
//	//}
//	return result,nil
//	//return result,nil
//}
//
//
//func GetByPrimaryKey(sql string,input interface{}) (map[string]interface{},error) {
//	tx,err := db.Begin()
//	if err != nil {
//		return nil,err
//	}
//	defer tx.Commit()
//	rows,err := tx.Query(sql)
//	if err != nil {
//		return nil,err
//	}
//	defer rows.Close()
//
//	columns, _ := rows.Columns()
//	scanArgs := make([]interface{}, len(columns))
//	values := make([]interface{}, len(columns))
//	for i := range values {
//		scanArgs[i] = &values[i]
//	}
//
//	for rows.Next() {
//		//将行数据保存到record字典
//		err = rows.Scan(scanArgs...)
//		record := make(map[string]interface{})
//		for i, value := range values {
//			if value != nil {
//				fieldKind := getReflectKind(input,columns[i])
//				switch fieldKind {
//				case reflect.Bool:
//					formatValue,err := strconv.ParseBool(string(value.([]byte)))
//					if err != nil {
//						return nil,err
//					}
//					record[columns[i]] = formatValue
//				case reflect.Int:
//					formatValue,err := strconv.Atoi(string(value.([]byte)))
//					if err != nil {
//						return nil,err
//					}
//					record[columns[i]] = formatValue
//				case reflect.Int32:
//					value,err := strconv.ParseInt(string(value.([]byte)),10,64)
//					if err != nil {
//						return nil,err
//					}
//					record[columns[i]] = value
//				case reflect.Int64:
//					value,err := strconv.ParseInt(string(value.([]byte)),10,64)
//					if err != nil {
//						return nil,err
//					}
//					record[columns[i]] = value
//				default:
//					record[columns[i]] = string(value.([]byte))
//				}
//			}
//		}
//		return record,nil
//	}
//	return nil,errors.New("cannot find the data")
//}